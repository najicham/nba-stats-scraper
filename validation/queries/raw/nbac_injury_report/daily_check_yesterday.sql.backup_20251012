-- ============================================================================
-- File: validation/queries/raw/nbac_injury_report/daily_check_yesterday.sql
-- Purpose: Daily morning check to verify yesterday's injury reports
-- Usage: Run every morning at ~9 AM (after scraper completes)
-- ============================================================================
-- Instructions:
--   1. Schedule this to run daily at ~9 AM
--   2. Set up alerts for status != "✅ Complete" or "⚪ No games"
--   3. No date parameters needed - automatically checks yesterday
-- ============================================================================
-- Expected Results:
--   - status = "✅ Complete" when reports captured
--   - status = "⚪ No games" on off days
--   - status = "🔴 CRITICAL" requires immediate investigation
-- ============================================================================

WITH 
-- Check if yesterday had games
yesterday_schedule AS (
  SELECT
    COUNT(*) as scheduled_games
  FROM `nba-props-platform.nba_raw.nbac_schedule`
  WHERE game_date = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
    AND is_playoffs = FALSE
    AND game_date = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)  -- Partition filter
),

-- Check yesterday's injury reports
yesterday_reports AS (
  SELECT
    COUNT(DISTINCT report_hour) as hourly_snapshots,
    COUNT(DISTINCT player_lookup) as unique_players,
    COUNT(*) as total_records,
    AVG(confidence_score) as avg_confidence,
    MAX(CASE WHEN report_hour = 17 THEN 1 ELSE 0 END) as has_5pm_report,
    MAX(CASE WHEN report_hour = 20 THEN 1 ELSE 0 END) as has_8pm_report,
    MIN(report_hour) as earliest_hour,
    MAX(report_hour) as latest_hour
  FROM `nba-props-platform.nba_raw.nbac_injury_report`
  WHERE report_date = DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)
)

SELECT
  DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY) as check_date,
  FORMAT_DATE('%A', DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)) as day_of_week,
  s.scheduled_games,
  COALESCE(r.hourly_snapshots, 0) as hourly_snapshots,
  COALESCE(r.unique_players, 0) as unique_players,
  COALESCE(r.total_records, 0) as total_records,
  CASE WHEN r.has_5pm_report = 1 THEN '✓' ELSE '✗' END as has_5pm,
  CASE WHEN r.has_8pm_report = 1 THEN '✓' ELSE '✗' END as has_8pm,
  ROUND(r.avg_confidence, 3) as avg_confidence,
  CASE
    -- FIXED: Off day scenarios - check for 0 instead of IS NULL after COALESCE
    WHEN s.scheduled_games = 0 AND COALESCE(r.hourly_snapshots, 0) = 0 
      THEN '⚪ Expected: Off day - no reports'
    WHEN s.scheduled_games = 0 AND COALESCE(r.hourly_snapshots, 0) > 0 
      THEN '✅ Complete: Off day with reports'
    
    -- Game day scenarios - CRITICAL issues
    WHEN s.scheduled_games > 0 AND COALESCE(r.hourly_snapshots, 0) = 0 
      THEN '🔴 CRITICAL: Game day - NO injury reports'
    WHEN s.scheduled_games > 0 AND r.hourly_snapshots <= 2 
      THEN '🔴 CRITICAL: Game day - very few snapshots'
    
    -- Game day scenarios - ERROR issues
    WHEN s.scheduled_games > 0 AND r.has_5pm_report = 0 AND r.has_8pm_report = 0 
      THEN '🟡 ERROR: Game day - missing both peak hours'
    WHEN s.scheduled_games > 0 AND r.has_5pm_report = 0 
      THEN '⚠️  WARNING: Game day - missing 5 PM report'
    WHEN s.scheduled_games > 0 AND r.has_8pm_report = 0 
      THEN '⚠️  WARNING: Game day - missing 8 PM report'
    
    -- Game day scenarios - SUCCESS
    WHEN s.scheduled_games > 0 AND r.hourly_snapshots >= 5 
      THEN '✅ Complete: Game day with good coverage'
    
    ELSE '📊 Review: Unusual pattern'
  END as status
FROM yesterday_schedule s
CROSS JOIN yesterday_reports r;