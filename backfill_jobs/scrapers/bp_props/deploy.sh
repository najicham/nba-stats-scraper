#!/bin/bash
# FILE: backfill_jobs/scrapers/bp_props/deploy.sh

# Deploy BettingPros Props Backfill Job

set -e

# Source shared wrapper functions
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
source "$SCRIPT_DIR/../../../bin/shared/deploy_wrapper_common.sh"

# Start deployment timing
start_deployment_timer

echo "Deploying BettingPros Props Backfill Job..."

# Use standardized scrapers backfill deployment script
./bin/scrapers/deploy/deploy_scrapers_backfill_job.sh bp_props

echo "Deployment complete!"
echo ""

print_section_header "Test Commands"
echo ""
echo "🔴 BACKFILL MISSING DATES (NEW - Most Common)"
echo "  # Dry run - see what would be processed:"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"^|^--dates=2024-11-12,2024-11-15|--dry-run\""
echo ""
echo "  # Smart mode - 10 missing dates (checks GCS, scrapes if needed):"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"^|^--dates=2024-11-12,2024-11-15,2024-11-19,2024-11-22,2024-11-26,2024-11-29,2024-12-03,2024-12-10,2024-12-11,2024-12-14\""
echo ""
echo "  # Test single date first:"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"^|^--dates=2024-11-12\""
echo ""
echo "📁 REPROCESS EXISTING GCS DATA (NEW)"
echo "  # Reprocess specific dates (GCS must exist):"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"^|^--dates=2024-11-12,2024-11-15|--mode=reprocess\""
echo ""
echo "  # Reprocess November (all dates with GCS data):"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"--start-date=2024-11-01,--end-date=2024-11-30,--mode=reprocess\""
echo ""
echo "📅 DATE RANGE BACKFILL (NEW)"
echo "  # November 2024:"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"--start-date=2024-11-01,--end-date=2024-11-30\""
echo ""
echo "  # December 2024 (first 14 days):"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"--start-date=2024-12-01,--end-date=2024-12-14\""
echo ""
echo "🏀 HISTORICAL SEASONS (Original Behavior)"
echo "  # Default seasons (2021, 2022, 2023):"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2"
echo ""
echo "  # Specific seasons with pipe delimiter:"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"^|^--seasons=2021,2022\""
echo ""
echo "  # Single season with limit:"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"^|^--seasons=2024|--limit=10\""
echo ""
echo "  # Dry run to see counts:"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"^|^--seasons=2021|--dry-run|--limit=10\""
echo ""
echo "🏆 PLAYOFFS ONLY (Original Feature)"
echo "  # Playoffs only for specific seasons:"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"^|^--seasons=2022,2023|--playoffs-only\""
echo ""
echo "  # Playoffs only for date range:"
echo "  gcloud run jobs execute bp-props-backfill --region=us-west2 \\"
echo "    --args=\"--start-date=2024-04-01,--end-date=2024-06-30,--playoffs-only\""
echo ""

print_section_header "Monitor logs"
echo "  gcloud beta run jobs executions logs read [execution-id] --region=us-west2 --follow"
echo ""

print_section_header "Notes"
echo "  ⭐ NEW FEATURES:"
echo "    • --dates: Specify exact dates to backfill (e.g., missing validation dates)"
echo "    • --mode: Choose processing mode (smart/reprocess/scrape)"
echo "    • --start-date/--end-date: Backfill date range"
echo "    • Smart mode (default): Checks GCS first, scrapes if needed, then processes to BigQuery"
echo ""
echo "  📝 MODES:"
echo "    • smart (default): Check GCS → Reprocess if exists, else scrape → then process"
echo "    • reprocess: Only process existing GCS files to BigQuery (no API calls)"
echo "    • scrape: Only scrape API (original behavior, no BigQuery processing)"
echo ""
echo "  ⚠️  CRITICAL - Comma-Separated Values:"
echo "    • MUST use pipe delimiter: --args=\"^|^--dates=2024-11-12,2024-11-15\""
echo "    • Without ^|^ delimiter, commas split into separate args and job fails"
echo "    • Example: ^|^--seasons=2021,2022|--playoffs-only"
echo ""
echo "  🔧 REPROCESSING MODE:"
echo "    • Reads JSON from GCS: gs://nba-scraped-data/bettingpros/player-props/points/"
echo "    • Uses BettingPropsProcessor to transform and load to BigQuery"
echo "    • Perfect for when scraper ran but processor failed"
echo "    • Skips dates without GCS data (logs warning)"
echo ""
echo "  💾 ORIGINAL BEHAVIOR (still works):"
echo "    • Default seasons: 2021, 2022, 2023 (covers 2021-22, 2022-23, 2023-24)"
echo "    • Historical coverage: fills gap before Odds API coverage began"
echo "    • Uses NBA.com schedule data from GCS to generate date lists"
echo "    • Two scrapers per date: bp_events + bp_player_props"
echo ""
echo "  🎯 SMART MODE FLOW:"
echo "    For each date:"
echo "      1. Check if data exists in GCS"
echo "      2. If yes → Reprocess from GCS to BigQuery"
echo "      3. If no → Scrape from API → Save to GCS → Process to BigQuery"
echo ""
echo "  🔧 TECHNICAL DETAILS:"
echo "    • Rate limited: 3 seconds between scraper calls"
echo "    • Filters: All-Star, preseason, special events excluded"
echo "    • Resume logic: Skips dates with both events and props data"
echo "    • Job timeout: 6 hours, 2GB memory, 1 CPU"
echo ""
echo "  📍 GCS PATHS:"
echo "    • Events: gs://nba-scraped-data/bettingpros/events/"
echo "    • Props: gs://nba-scraped-data/bettingpros/player-props/points/"
echo ""
echo "  📊 BIGQUERY TABLE:"
echo "    • Table: nba-props-platform.nba_raw.bettingpros_player_points_props"
echo "    • Reprocessing writes directly to this table"
echo ""

print_section_header "Validate results"
echo "  # Check specific dates in BigQuery"
echo "  bq query --use_legacy_sql=false \\"
echo "    'SELECT game_date, COUNT(*) as records,"
echo "            COUNT(DISTINCT player_lookup) as players,"
echo "            COUNT(DISTINCT bookmaker) as bookmakers"
echo "     FROM \`nba-props-platform.nba_raw.bettingpros_player_points_props\`"
echo "     WHERE game_date IN (\"2024-11-12\", \"2024-11-15\", \"2024-11-19\")"
echo "     GROUP BY game_date ORDER BY game_date'"
echo ""
echo "  # Check GCS for specific date"
echo "  gsutil ls gs://nba-scraped-data/bettingpros/player-props/points/2024-11-12/"
echo ""
echo "  # Count files per season"
echo "  for year in 2021 2022 2023 2024; do"
echo "    echo \"Season \$year:\""
echo "    gsutil ls gs://nba-scraped-data/bettingpros/player-props/points/\$year-* 2>/dev/null | wc -l"
echo "  done"
echo ""
echo "  # Verify data quality for date range"
echo "  bq query --use_legacy_sql=false \\"
echo "    'SELECT game_date,"
echo "            COUNT(*) as total_records,"
echo "            COUNT(DISTINCT player_lookup) as players,"
echo "            COUNT(DISTINCT bookmaker) as bookmakers,"
echo "            AVG(validation_confidence) as avg_confidence"
echo "     FROM \`nba-props-platform.nba_raw.bettingpros_player_points_props\`"
echo "     WHERE game_date BETWEEN \"2024-11-01\" AND \"2024-12-31\""
echo "     GROUP BY game_date ORDER BY game_date'"
echo ""
echo "  # Check for missing dates (should be empty after backfill)"
echo "  bq query --use_legacy_sql=false \\"
echo "    'WITH game_dates AS ("
echo "       SELECT DISTINCT game_date"
echo "       FROM \`nba-props-platform.nba_raw.nba_schedule\`"
echo "       WHERE season_year = 2024"
echo "         AND game_type IN (\"regular_season\", \"playoff\", \"play_in\")"
echo "     ),"
echo "     props_dates AS ("
echo "       SELECT DISTINCT game_date"
echo "       FROM \`nba-props-platform.nba_raw.bettingpros_player_points_props\`"
echo "     )"
echo "     SELECT g.game_date"
echo "     FROM game_dates g"
echo "     LEFT JOIN props_dates p ON g.game_date = p.game_date"
echo "     WHERE p.game_date IS NULL"
echo "     ORDER BY g.game_date'"
echo ""

print_deployment_summary