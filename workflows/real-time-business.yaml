# workflows/real-time-business.yaml
# NBA Real-Time Business Workflow - CRITICAL for prop betting revenue
# Handles Events -> Props dependency and core business operations
# Runs every 2 hours from 8 AM - 8 PM PT

main:
  params: [args]
  steps:
    - init:
        assign:
          - current_timestamp: ${sys.now()}
          - workflow_start: ${sys.now()}

    - log_workflow_start:
        call: sys.log
        args:
          text: "Starting NBA Real-Time Business Workflow"
          severity: INFO

    # PHASE 1: Get betting events first (CRITICAL - required for props)
    - get_betting_events:
        try:
          steps:
            - call_events_scraper:
                call: run_scraper
                args:
                  scraper_name: "odds-events"
                  scraper_class: "GetOddsApiEvents"
                  endpoint: "oddsa_events"
                  timeout: 300
                  critical: true
                result: events_result
        except:
          as: e
          steps:
            - handle_events_failure:
                call: sys.log
                args:
                  text: "CRITICAL: Events API failed - Props betting revenue BLOCKED"
                  severity: ERROR
            - return_events_failure:
                return:
                  status: "CRITICAL_FAILURE"
                  failed_component: "events_api"
                  error: ${e.message}
                  impact: "Props betting revenue blocked"
                  timestamp: ${current_timestamp}

    # PHASE 2: Foundation scrapers (parallel)
    - foundation_scrapers:
        try:
          parallel:
            exception_policy: continueAll
            branches:
              - player_intelligence:
                  steps:
                    - call_player_list:
                        call: run_scraper
                        args:
                          scraper_name: "nba-player-list"
                          scraper_class: "GetNbaComPlayerList"
                          endpoint: "nbac_player_list"
                          timeout: 300
                          critical: true
                        result: player_list_result

              - injury_status:
                  steps:
                    - call_injury_report:
                        call: run_scraper
                        args:
                          scraper_name: "nba-injury-report"
                          scraper_class: "GetNbaComInjuryReport"
                          endpoint: "nbac_injury_report"
                          timeout: 300
                          critical: true
                        result: injury_result

              - player_validation:
                  steps:
                    - call_bdl_players:
                        call: run_scraper
                        args:
                          scraper_name: "bdl-active-players"
                          scraper_class: "BdlActivePlayersScraper"
                          endpoint: "bdl_active_players"
                          timeout: 300
                          critical: false
                        result: bdl_players_result
        except:
          as: e
          steps:
            - log_foundation_error:
                call: sys.log
                args:
                  text: "Foundation scrapers had errors"
                  severity: WARNING

    - log_foundation_complete:
        call: sys.log
        args:
          text: "Foundation scrapers completed"
          severity: INFO

    # PHASE 3: Check Events success before proceeding to Props
    - check_events_success:
        switch:
          - condition: ${events_result.status == "success"}
            next: wait_before_props
          - condition: true
            next: skip_props_collection

    - wait_before_props:
        call: sys.log
        args:
          text: "Events successful - waiting before Props API"
          severity: INFO

    - delay_for_processing:
        call: sys.sleep
        args:
          seconds: 30

    # PHASE 4: Collect player props (CORE BUSINESS REVENUE)
    - collect_player_props:
        try:
          steps:
            - call_props_scraper:
                call: run_scraper
                args:
                  scraper_name: "odds-player-props"
                  scraper_class: "GetOddsApiCurrentEventOdds"
                  endpoint: "oddsa_player_props"
                  timeout: 600
                  critical: true
                result: props_result
        except:
          as: e
          steps:
            - handle_props_failure:
                call: sys.log
                args:
                  text: "CRITICAL: Props API failed - Revenue generation BLOCKED"
                  severity: ERROR
            - return_props_failure:
                return:
                  status: "CRITICAL_FAILURE"
                  failed_component: "props_api"
                  error: ${e.message}
                  impact: "Revenue generation blocked"
                  events_status: ${events_result.status}
                  timestamp: ${current_timestamp}
        next: workflow_success

    # Handle case where events failed
    - skip_props_collection:
        assign:
          - props_result:
              status: "skipped"
              message: "Skipped due to events failure"

    - log_props_skipped:
        call: sys.log
        args:
          text: "Skipping Props API due to Events failure"
          severity: ERROR
        next: workflow_partial_failure

    # SUCCESS PATH
    - workflow_success:
        assign:
          - workflow_end: ${sys.now()}
          - total_duration: ${workflow_end - workflow_start}

    - log_workflow_success:
        call: sys.log
        args:
          text: "NBA Real-Time Business Workflow completed successfully"
          severity: INFO

    - return_success:
        return:
          status: "SUCCESS"
          message: "All core business operations completed successfully"
          duration_seconds: ${total_duration}
          events_status: ${events_result.status}
          props_status: ${props_result.status}
          timestamp: ${current_timestamp}

    # PARTIAL FAILURE PATH
    - workflow_partial_failure:
        assign:
          - workflow_end: ${sys.now()}
          - total_duration: ${workflow_end - workflow_start}

    - log_workflow_partial_failure:
        call: sys.log
        args:
          text: "NBA Real-Time Business Workflow completed with PARTIAL FAILURE"
          severity: ERROR

    - return_partial_failure:
        return:
          status: "PARTIAL_FAILURE"
          message: "Foundation scrapers completed but Props API skipped"
          duration_seconds: ${total_duration}
          events_status: ${events_result.status}
          props_status: "skipped"
          timestamp: ${current_timestamp}

# Reusable subworkflow for running individual scrapers
run_scraper:
  params: [scraper_name, scraper_class, endpoint, timeout, critical]
  steps:
    - log_start:
        call: sys.log
        args:
          text: "Starting scraper"
          severity: INFO

    - call_scraper:
        try:
          call: http.post
          args:
            url: "https://nba-scrapers-756957797294.us-west2.run.app/scrape"
            query:
              scraper: ${endpoint}
            timeout: ${timeout}
            headers:
              Content-Type: "application/json"
          result: scraper_response
        except:
          as: e
          steps:
            - log_failure:
                call: sys.log
                args:
                  text: "Scraper failed"
                  severity: ERROR
            - return_failure:
                return:
                  status: "failure"
                  scraper_name: ${scraper_name}
                  error: ${e.message}
                  timestamp: ${sys.now()}

    - check_response:
        switch:
          - condition: ${scraper_response.code >= 200 AND scraper_response.code < 300}
            next: log_success
          - condition: true
            next: return_http_failure

    - return_http_failure:
        return:
          status: "failure"
          scraper_name: ${scraper_name}
          http_code: ${scraper_response.code}
          timestamp: ${sys.now()}

    - log_success:
        call: sys.log
        args:
          text: "Scraper completed successfully"
          severity: INFO

    - return_success:
        return:
          status: "success"
          scraper_name: ${scraper_name}
          http_code: ${scraper_response.code}
          timestamp: ${sys.now()}
          