#!/bin/bash
# =============================================================================
# File: scripts/validate-espn-scoreboard
# Purpose: CLI tool for running ESPN Scoreboard validation queries
# Usage: ./scripts/validate-espn-scoreboard [command] [options]
# =============================================================================

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Base directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"
QUERIES_DIR="$PROJECT_ROOT/validation/queries/raw/espn_scoreboard"

# =============================================================================
# Helper Functions
# =============================================================================

print_header() {
    echo -e "${BLUE}=================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}=================================================${NC}"
}

print_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

print_error() {
    echo -e "${RED}❌ $1${NC}"
}

# =============================================================================
# Show Available Commands
# =============================================================================

show_help() {
    cat << EOF
${GREEN}ESPN Scoreboard Validation Tool (Backup Source)${NC}

Usage: validate-espn-scoreboard [command] [options]

${YELLOW}DATA COVERAGE:${NC}
  coverage              Analyze sparse backup coverage patterns
  team-mapping          Verify ESPN team code conversions (GS→GSW, etc.)

${YELLOW}DAILY MONITORING:${NC}
  yesterday             Morning validation check (6 AM after 5 AM workflow)
  quality               Comprehensive data quality validation

${YELLOW}CROSS-VALIDATION:${NC}
  cross-bdl             Compare scores vs Ball Don't Lie (primary)
  cross-nbac            Compare scores vs NBA.com (CRITICAL - both official)
  discrepancies         Three-way comparison (ESPN vs BDL vs NBA.com)

${YELLOW}OPTIONS:${NC}
  --csv                 Save results to CSV file
  --table               Save results to BigQuery table
  --help                Show this help message

${YELLOW}EXAMPLES:${NC}
  validate-espn-scoreboard coverage              # Check sparse coverage patterns
  validate-espn-scoreboard yesterday --csv       # Daily check, save to CSV
  validate-espn-scoreboard cross-nbac            # Critical validation vs official
  validate-espn-scoreboard team-mapping          # Check ESPN team codes
  validate-espn-scoreboard discrepancies         # Find score mismatches

${YELLOW}QUICK COMMANDS:${NC}
  validate-espn-scoreboard list                  # List all available queries
  validate-espn-scoreboard help                  # Show this help

${BLUE}NOTE: ESPN is a backup source - sparse coverage is NORMAL${NC}

EOF
}

# =============================================================================
# List All Queries
# =============================================================================

list_queries() {
    print_header "Available Validation Queries"
    echo ""
    echo "Data Coverage:"
    echo "  1. date_coverage_analysis.sql                 (alias: coverage)"
    echo "  2. team_mapping_validation.sql                (alias: team-mapping)"
    echo ""
    echo "Daily Monitoring:"
    echo "  3. daily_check_yesterday.sql                  (alias: yesterday)"
    echo "  4. data_quality_check.sql                     (alias: quality)"
    echo ""
    echo "Cross-Validation:"
    echo "  5. cross_validate_with_bdl.sql                (alias: cross-bdl)"
    echo "  6. cross_validate_with_nbac.sql               (alias: cross-nbac)"
    echo "  7. find_score_discrepancies.sql               (alias: discrepancies)"
    echo ""
    print_warning "Note: ESPN is backup source - 0 games is VALID"
}

# =============================================================================
# Run Query
# =============================================================================

run_query() {
    local query_file=$1
    local output_format=$2
    local query_path="$QUERIES_DIR/$query_file"

    if [ ! -f "$query_path" ]; then
        print_error "Query file not found: $query_file"
        echo "Run 'validate-espn-scoreboard list' to see available queries"
        exit 1
    fi

    print_header "Running: $query_file"
    echo ""

    case $output_format in
        csv)
            local timestamp=$(date +%Y%m%d_%H%M%S)
            local output_file="validation_espn_${query_file%.sql}_${timestamp}.csv"
            print_warning "Saving results to: $output_file"
            bq query --use_legacy_sql=false --format=csv < "$query_path" > "$output_file"
            print_success "Results saved to $output_file"
            ;;
        table)
            local timestamp=$(date +%Y%m%d)
            local table_name="validation.espn_${query_file%.sql}_${timestamp}"
            print_warning "Saving to BigQuery table: $table_name"
            bq query --use_legacy_sql=false --destination_table="nba-props-platform:${table_name}" < "$query_path"
            print_success "Results saved to nba-props-platform:${table_name}"
            ;;
        *)
            bq query --use_legacy_sql=false < "$query_path"
            ;;
    esac
}

# =============================================================================
# Main Command Handler
# =============================================================================

main() {
    local command=$1
    local output_format=""

    # Parse options
    shift || true
    while [[ $# -gt 0 ]]; do
        case $1 in
            --csv)
                output_format="csv"
                shift
                ;;
            --table)
                output_format="table"
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
    done

    # Handle commands
    case $command in
        # Show help
        help|--help|-h|"")
            show_help
            ;;

        # List queries
        list|ls)
            list_queries
            ;;

        # Data coverage
        coverage|dates|sparse)
            run_query "date_coverage_analysis.sql" "$output_format"
            ;;

        team-mapping|teams|mapping|codes)
            run_query "team_mapping_validation.sql" "$output_format"
            ;;

        # Daily monitoring
        yesterday|daily)
            run_query "daily_check_yesterday.sql" "$output_format"
            ;;

        quality|dq|data-quality)
            run_query "data_quality_check.sql" "$output_format"
            ;;

        # Cross-validation
        cross-bdl|bdl|compare-bdl)
            run_query "cross_validate_with_bdl.sql" "$output_format"
            ;;

        cross-nbac|nbac|compare-nbac|official)
            run_query "cross_validate_with_nbac.sql" "$output_format"
            ;;

        discrepancies|disc|three-way|compare-all)
            run_query "find_score_discrepancies.sql" "$output_format"
            ;;

        # Unknown command
        *)
            print_error "Unknown command: $command"
            echo ""
            show_help
            exit 1
            ;;
    esac
}

# =============================================================================
# Run
# =============================================================================

main "$@"
