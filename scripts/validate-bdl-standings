#!/bin/bash
# ============================================================================
# File: scripts/validate-bdl-standings
# ============================================================================
# BDL Standings Validation CLI Tool
# Usage: ./validate-bdl-standings [command] [options]
# ============================================================================

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
QUERIES_DIR="validation/queries/raw/bdl_standings"
PROJECT_ID="nba-props-platform"

# Helper functions
print_header() {
    echo -e "${BLUE}================================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================================${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

run_query() {
    local query_file=$1
    local output_format=${2:-pretty}
    
    if [ ! -f "$QUERIES_DIR/$query_file" ]; then
        print_error "Query file not found: $query_file"
        exit 1
    fi
    
    if [ "$output_format" == "csv" ]; then
        bq query --use_legacy_sql=false --format=csv < "$QUERIES_DIR/$query_file"
    elif [ "$output_format" == "json" ]; then
        bq query --use_legacy_sql=false --format=prettyjson < "$QUERIES_DIR/$query_file"
    else
        bq query --use_legacy_sql=false < "$QUERIES_DIR/$query_file"
    fi
}

# Command: daily
cmd_daily() {
    print_header "BDL Standings Daily Check"
    echo "Checking yesterday's standings snapshot..."
    echo ""
    run_query "daily_check_yesterday.sql" "$1"
}

# Command: weekly  
cmd_weekly() {
    print_header "BDL Standings Weekly Check"
    echo "Reviewing last 7 days of standings..."
    echo ""
    run_query "weekly_check_last_7_days.sql" "$1"
}

# Command: coverage
cmd_coverage() {
    print_header "BDL Standings Season Coverage"
    echo "Analyzing season coverage by month..."
    echo ""
    run_query "season_coverage_check.sql" "$1"
}

# Command: conference
cmd_conference() {
    print_header "BDL Conference Standings Check"
    echo "Validating conference rankings..."
    echo ""
    run_query "conference_standings_check.sql" "$1"
}

# Command: quality
cmd_quality() {
    print_header "BDL Standings Data Quality Check"
    echo "Validating calculations and record math..."
    echo ""
    run_query "data_quality_check.sql" "$1"
}

# Command: missing
cmd_missing() {
    print_header "Find Missing Dates"
    echo "Identifying dates without standings data..."
    echo ""
    print_warning "Remember to update date ranges in the query for your target season!"
    echo ""
    run_query "find_missing_dates.sql" "$1"
}

# Command: all
cmd_all() {
    print_header "Running All BDL Standings Validations"
    echo ""
    
    print_success "1/6: Daily check..."
    cmd_daily
    echo ""
    
    print_success "2/6: Weekly check..."
    cmd_weekly
    echo ""
    
    print_success "3/6: Season coverage..."
    cmd_coverage
    echo ""
    
    print_success "4/6: Conference standings..."
    cmd_conference
    echo ""
    
    print_success "5/6: Data quality..."
    cmd_quality
    echo ""
    
    print_success "6/6: Missing dates..."
    cmd_missing
    echo ""
    
    print_header "All Validations Complete"
}

# Command: help
cmd_help() {
    cat << EOF
BDL Standings Validation Tool

USAGE:
    validate-bdl-standings <command> [options]

COMMANDS:
    daily           Check yesterday's standings snapshot
    weekly          Review last 7 days of standings
    coverage        Analyze season coverage by month
    conference      Validate conference rankings
    quality         Check data quality and calculations
    missing         Find missing dates during season
    all             Run all validation checks
    help            Show this help message

OPTIONS:
    --csv           Output in CSV format
    --json          Output in JSON format
    --table TABLE   Save results to BigQuery table

EXAMPLES:
    # Daily monitoring (run every morning)
    validate-bdl-standings daily

    # Weekly review (Monday mornings)
    validate-bdl-standings weekly
    validate-bdl-standings conference
    validate-bdl-standings quality

    # After backfill
    validate-bdl-standings coverage
    validate-bdl-standings missing

    # Export to CSV for analysis
    validate-bdl-standings missing --csv > missing_dates.csv

    # Run all checks
    validate-bdl-standings all

QUERY FILES:
    All queries are located in: $QUERIES_DIR/

DOCUMENTATION:
    See README.md in the queries directory for detailed information
    about each validation query and expected results.

EOF
}

# Main command dispatcher
main() {
    # Check if bq command is available
    if ! command -v bq &> /dev/null; then
        print_error "BigQuery CLI (bq) not found. Please install Google Cloud SDK."
        exit 1
    fi
    
    # Parse command
    local command=${1:-help}
    shift || true
    
    # Parse options
    local output_format="pretty"
    local output_table=""
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --csv)
                output_format="csv"
                shift
                ;;
            --json)
                output_format="json"
                shift
                ;;
            --table)
                output_table="$2"
                shift 2
                ;;
            *)
                print_error "Unknown option: $1"
                cmd_help
                exit 1
                ;;
        esac
    done
    
    # Execute command
    case $command in
        daily)
            cmd_daily "$output_format"
            ;;
        weekly)
            cmd_weekly "$output_format"
            ;;
        coverage)
            cmd_coverage "$output_format"
            ;;
        conference)
            cmd_conference "$output_format"
            ;;
        quality)
            cmd_quality "$output_format"
            ;;
        missing)
            cmd_missing "$output_format"
            ;;
        all)
            cmd_all
            ;;
        help|--help|-h)
            cmd_help
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            cmd_help
            exit 1
            ;;
    esac
}

# Run main
main "$@"