#!/bin/bash

# ============================================================================
# File: scripts/validate-player-list
# validate-player-list
# CLI tool for validating NBA.com Player List data
# ============================================================================

set -e

# Configuration
QUERIES_DIR="validation/queries/raw/nbac_player_list"
PROJECT_ID="nba-props-platform"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# Check if queries directory exists
check_queries_dir() {
    if [ ! -d "$QUERIES_DIR" ]; then
        print_error "Queries directory not found: $QUERIES_DIR"
        print_info "Run this script from the nba-stats-scraper root directory"
        exit 1
    fi
}

# Run a query and format output
run_query() {
    local query_file=$1
    local output_format=${2:-"terminal"}
    local output_table=$3
    
    if [ ! -f "$QUERIES_DIR/$query_file" ]; then
        print_error "Query file not found: $query_file"
        exit 1
    fi
    
    case $output_format in
        csv)
            bq query --use_legacy_sql=false --format=csv < "$QUERIES_DIR/$query_file"
            ;;
        table)
            if [ -z "$output_table" ]; then
                print_error "Table name required for --table output"
                exit 1
            fi
            bq query --use_legacy_sql=false --destination_table="$PROJECT_ID:$output_table" --replace < "$QUERIES_DIR/$query_file"
            print_success "Results written to $output_table"
            ;;
        terminal|*)
            bq query --use_legacy_sql=false --format=prettyjson < "$QUERIES_DIR/$query_file" | \
                jq -r '.[] | [.section, .metric // .team // .category, .value // .count, .status // .percentage] | @tsv' | \
                while IFS=$'\t' read -r section metric value status; do
                    # Color-code based on status symbols
                    if [[ $status == *"✅"* ]] || [[ $section == *"✅"* ]]; then
                        echo -e "${GREEN}${section}\t${metric}\t${value}\t${status}${NC}"
                    elif [[ $status == *"🔴"* ]] || [[ $section == *"🔴"* ]]; then
                        echo -e "${RED}${section}\t${metric}\t${value}\t${status}${NC}"
                    elif [[ $status == *"🟡"* ]] || [[ $status == *"⚠️"* ]] || [[ $section == *"🟡"* ]]; then
                        echo -e "${YELLOW}${section}\t${metric}\t${value}\t${status}${NC}"
                    elif [[ $section == *"==="* ]]; then
                        echo -e "${BLUE}${section}${NC}"
                    else
                        echo -e "${section}\t${metric}\t${value}\t${status}"
                    fi
                done | column -t -s $'\t'
            ;;
    esac
}

# Command functions
cmd_freshness() {
    print_header "Player List Freshness Check"
    print_info "Checking if data is being updated regularly..."
    echo ""
    run_query "data_freshness_check.sql" "$1" "$2"
}

cmd_teams() {
    print_header "Team Completeness Check"
    print_info "Verifying all 30 teams present with reasonable player counts..."
    echo ""
    run_query "team_completeness_check.sql" "$1" "$2"
}

cmd_quality() {
    print_header "Data Quality Check"
    print_info "Comprehensive validation: duplicates, NULLs, invalid data..."
    echo ""
    run_query "data_quality_check.sql" "$1" "$2"
}

cmd_bdl_comparison() {
    print_header "Cross-Validation with Ball Don't Lie"
    print_info "Comparing NBA.com vs BDL active players..."
    echo ""
    run_query "cross_validate_with_bdl.sql" "$1" "$2"
}

cmd_daily() {
    print_header "Daily Check - Yesterday"
    print_info "Quick health check for daily monitoring..."
    echo ""
    run_query "daily_check_yesterday.sql" "$1" "$2"
}

cmd_distribution() {
    print_header "Player Distribution Analysis"
    print_info "Analyzing roster composition by position, experience, etc..."
    echo ""
    run_query "player_distribution_check.sql" "$1" "$2"
}

cmd_discovery() {
    print_header "Discovery Phase - Understanding the Data"
    
    print_info "Running Discovery Query 1: Date Range & Volume..."
    echo ""
    bq query --use_legacy_sql=false < "$QUERIES_DIR/../discovery/discovery_date_range.sql" 2>/dev/null || \
        print_warning "Discovery query not found - run queries manually"
    
    echo ""
    print_info "Running Discovery Query 2: Team Distribution..."
    echo ""
    bq query --use_legacy_sql=false < "$QUERIES_DIR/../discovery/discovery_team_distribution.sql" 2>/dev/null || \
        print_warning "Discovery query not found - run queries manually"
    
    echo ""
    print_info "Running Discovery Query 3: Duplicate Detection..."
    echo ""
    bq query --use_legacy_sql=false < "$QUERIES_DIR/../discovery/discovery_duplicates.sql" 2>/dev/null || \
        print_warning "Discovery query not found - run queries manually"
}

cmd_all() {
    print_header "Running Complete Validation Suite"
    echo ""
    
    cmd_daily "$1" "$2"
    echo ""
    
    cmd_freshness "$1" "$2"
    echo ""
    
    cmd_teams "$1" "$2"
    echo ""
    
    cmd_quality "$1" "$2"
    echo ""
    
    cmd_bdl_comparison "$1" "$2"
    echo ""
    
    print_success "Complete validation suite finished"
}

# Show usage
show_usage() {
    cat << EOF
Usage: validate-player-list <command> [options]

COMMANDS:
    daily           Quick daily health check (run every morning)
    freshness       Check if data is being updated regularly
    teams           Verify all 30 teams present with reasonable counts
    quality         Comprehensive data quality validation
    bdl-comparison  Compare against Ball Don't Lie active players
    distribution    Analyze roster composition (positions, experience)
    discovery       Run discovery queries to understand data
    all             Run complete validation suite

OPTIONS:
    --csv           Output results as CSV
    --table <name>  Write results to BigQuery table
    --help          Show this help message

EXAMPLES:
    # Daily morning check (recommended)
    validate-player-list daily

    # Full validation suite
    validate-player-list all

    # Check if data is fresh
    validate-player-list freshness

    # Export to CSV
    validate-player-list teams --csv > teams.csv

    # Save to BigQuery table
    validate-player-list quality --table nba_processing.player_list_quality_check

DAILY MONITORING:
    Schedule this to run every morning at 9 AM:
    validate-player-list daily

    Alert on:
    - 🔴 Last update > 36 hours
    - 🔴 Teams != 30
    - 🔴 Any duplicates

EXPECTED RESULTS:
    ✅ Updated within 24 hours
    ✅ 30 of 30 teams
    ✅ 390-550 active players
    ✅ 60-70% overlap with BDL
    ✅ 0 duplicates

For more information, see validation/queries/raw/nbac_player_list/README.md

EOF
}

# Main script logic
main() {
    check_queries_dir
    
    # Parse command and options
    COMMAND=${1:-""}
    shift || true
    
    OUTPUT_FORMAT="terminal"
    OUTPUT_TABLE=""
    
    # Parse options
    while [[ $# -gt 0 ]]; do
        case $1 in
            --csv)
                OUTPUT_FORMAT="csv"
                shift
                ;;
            --table)
                OUTPUT_FORMAT="table"
                OUTPUT_TABLE="$2"
                shift 2
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    # Execute command
    case $COMMAND in
        daily)
            cmd_daily "$OUTPUT_FORMAT" "$OUTPUT_TABLE"
            ;;
        freshness)
            cmd_freshness "$OUTPUT_FORMAT" "$OUTPUT_TABLE"
            ;;
        teams)
            cmd_teams "$OUTPUT_FORMAT" "$OUTPUT_TABLE"
            ;;
        quality)
            cmd_quality "$OUTPUT_FORMAT" "$OUTPUT_TABLE"
            ;;
        bdl-comparison|bdl)
            cmd_bdl_comparison "$OUTPUT_FORMAT" "$OUTPUT_TABLE"
            ;;
        distribution)
            cmd_distribution "$OUTPUT_FORMAT" "$OUTPUT_TABLE"
            ;;
        discovery)
            cmd_discovery
            ;;
        all)
            cmd_all "$OUTPUT_FORMAT" "$OUTPUT_TABLE"
            ;;
        --help|help|"")
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown command: $COMMAND"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# Run main
main "$@"