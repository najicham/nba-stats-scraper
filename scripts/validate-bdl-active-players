#!/bin/bash

# ============================================================================
# File: scripts/validate-bdl-active-players
# CLI tool for validating Ball Don't Lie Active Players data
# ============================================================================

set -e

# Configuration
QUERIES_DIR="validation/queries/raw/bdl_active_players"
PROJECT_ID="nba-props-platform"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}$1${NC}"
    echo -e "${BLUE}================================${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}⚠ $1${NC}"
}

print_error() {
    echo -e "${RED}✗ $1${NC}"
}

print_info() {
    echo -e "${BLUE}ℹ $1${NC}"
}

# Check if queries directory exists
check_queries_dir() {
    if [ ! -d "$QUERIES_DIR" ]; then
        print_error "Queries directory not found: $QUERIES_DIR"
        print_info "Run this script from the nba-stats-scraper root directory"
        exit 1
    fi
}

# Run a query and format output
run_query() {
    local query_file="$1"
    local output_format="${2:-terminal}"
    local output_table="$3"

    if [ ! -f "$QUERIES_DIR/$query_file" ]; then
        print_error "Query file not found: $query_file"
        exit 1
    fi

    case "$output_format" in
        csv)
            bq query --use_legacy_sql=false --format=csv < "$QUERIES_DIR/$query_file"
            ;;
        table)
            if [ -z "$output_table" ]; then
                print_error "Table name required for --table output"
                exit 1
            fi
            bq query --use_legacy_sql=false --destination_table="$PROJECT_ID:$output_table" --replace < "$QUERIES_DIR/$query_file"
            print_success "Results written to $output_table"
            ;;
        *)
            bq query --use_legacy_sql=false --format=prettyjson < "$QUERIES_DIR/$query_file" | \
                jq -r '.[] | 
                    [
                        (.section // "" | tostring), 
                        (.metric // .count // .team // .category // "" | tostring), 
                        (.value // .count // "" | tostring), 
                        (.status // .percentage // .details // "" | tostring)
                    ] | @tsv' | \
                while IFS=$'\t' read -r section metric value status; do
                    if [[ "$status" == *"✅"* ]] || [[ "$section" == *"✅"* ]]; then
                        echo -e "${GREEN}${section}\t${metric}\t${value}\t${status}${NC}"
                    elif [[ "$status" == *"🔴"* ]] || [[ "$section" == *"🔴"* ]]; then
                        echo -e "${RED}${section}\t${metric}\t${value}\t${status}${NC}"
                    elif [[ "$status" == *"🟡"* ]] || [[ "$status" == *"⚠️"* ]] || [[ "$section" == *"🟡"* ]]; then
                        echo -e "${YELLOW}${section}\t${metric}\t${value}\t${status}${NC}"
                    elif [[ "$section" == *"==="* ]]; then
                        echo -e "${BLUE}${section}${NC}"
                    else
                        echo -e "${section}\t${metric}\t${value}\t${status}"
                    fi
                done | column -t -s $'\t'
            ;;
    esac
}

# Command functions
cmd_daily() {
    print_header "BDL Active Players - Daily Check"
    print_info "Quick health check for daily monitoring..."
    echo ""
    run_query "daily_freshness_check.sql" "$1" "$2"
}

cmd_count() {
    print_header "Player Count Check"
    print_info "Verifying player counts across teams and validation status..."
    echo ""
    run_query "player_count_check.sql" "$1" "$2"
}

cmd_validation_status() {
    print_header "Validation Status Summary (UNIQUE TO BDL)"
    print_info "Analyzing validation_status distribution..."
    echo ""
    run_query "validation_status_summary.sql" "$1" "$2"
}

cmd_quality() {
    print_header "Data Quality Check"
    print_info "Comprehensive validation: duplicates, NULLs, invalid data..."
    echo ""
    run_query "data_quality_check.sql" "$1" "$2"
}

cmd_cross_validate() {
    print_header "Cross-Validation with NBA.com"
    print_info "Comparing BDL vs NBA.com player lists..."
    echo ""
    run_query "cross_validate_with_nba_com.sql" "$1" "$2"
}

cmd_team_mismatches() {
    print_header "Team Mismatch Analysis"
    print_info "Deep dive into validation_status = 'team_mismatch'..."
    echo ""
    run_query "team_mismatch_analysis.sql" "$1" "$2"
}

cmd_missing_players() {
    print_header "Missing Players Analysis"
    print_info "Deep dive into validation_status = 'missing_nba_com'..."
    echo ""
    run_query "missing_players_analysis.sql" "$1" "$2"
}

cmd_all() {
    print_header "Running Complete BDL Validation Suite"
    echo ""

    cmd_daily "$1" "$2"
    echo ""

    cmd_count "$1" "$2"
    echo ""

    cmd_validation_status "$1" "$2"
    echo ""

    cmd_quality "$1" "$2"
    echo ""

    cmd_cross_validate "$1" "$2"
    echo ""

    print_success "Complete validation suite finished"
}

# Show usage
show_usage() {
    cat << 'EOF'
Usage: validate-bdl-active-players <command> [options]

COMMANDS:
    daily               Quick daily health check (run every morning)
    count               Verify player counts across teams
    validation-status   Analyze validation status distribution (unique to BDL)
    quality             Comprehensive data quality validation
    cross-validate      Compare against NBA.com player list
    team-mismatches     Deep dive into team_mismatch cases
    missing-players     Deep dive into missing_nba_com cases
    all                 Run complete validation suite

OPTIONS:
    --csv               Output results as CSV
    --table <name>      Write results to BigQuery table
    --help              Show this help message

EXAMPLES:
    # Daily morning check (recommended)
    validate-bdl-active-players daily

    # Full validation suite
    validate-bdl-active-players all

    # Check validation status (unique to BDL)
    validate-bdl-active-players validation-status

    # Export to CSV
    validate-bdl-active-players count --csv > player_counts.csv

    # Save to BigQuery table
    validate-bdl-active-players quality --table nba_processing.bdl_quality_check

    # Investigate high mismatch rate
    validate-bdl-active-players team-mismatches

    # Investigate high missing rate
    validate-bdl-active-players missing-players

DAILY MONITORING:
    Schedule this to run every morning at 9 AM:
    validate-bdl-active-players daily

    Alert on:
    - 🔴 Last update > 96 hours
    - 🔴 Teams != 30
    - 🔴 Player count < 500 or > 650
    - 🔴 Any duplicates
    - 🔴 Validation rate < 45%

EXPECTED RESULTS:
    ✅ Updated within 48 hours
    ✅ 30 of 30 teams
    ✅ 550-600 players total
    ✅ 55-65% validation rate (HEALTHY - not 100%!)
    ✅ 20-30% missing from NBA.com (expected - G-League)
    ✅ 10-20% team mismatches (expected - trade timing)
    ✅ 0 duplicates

IMPORTANT NOTES:
    - This table is NOT partitioned (unlike nbac_player_list)
    - 60% validation rate is HEALTHY (not a problem!)
    - Missing from NBA.com is expected (G-League, two-way contracts)
    - Team mismatches are normal (trade timing differences)

For more information, see validation/queries/raw/bdl_active_players/README.md

EOF
}

# Main script logic
main() {
    check_queries_dir

    local command="${1:-}"
    shift || true

    local output_format="terminal"
    local output_table=""

    # Parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            --csv)
                output_format="csv"
                shift
                ;;
            --table)
                output_format="table"
                output_table="$2"
                shift 2
                ;;
            --help)
                show_usage
                exit 0
                ;;
            *)
                print_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done

    # Execute command
    case "$command" in
        daily)
            cmd_daily "$output_format" "$output_table"
            ;;
        count)
            cmd_count "$output_format" "$output_table"
            ;;
        validation-status|validation)
            cmd_validation_status "$output_format" "$output_table"
            ;;
        quality)
            cmd_quality "$output_format" "$output_table"
            ;;
        cross-validate|cross)
            cmd_cross_validate "$output_format" "$output_table"
            ;;
        team-mismatches|mismatches)
            cmd_team_mismatches "$output_format" "$output_table"
            ;;
        missing-players|missing)
            cmd_missing_players "$output_format" "$output_table"
            ;;
        all)
            cmd_all "$output_format" "$output_table"
            ;;
        --help|help|"")
            show_usage
            exit 0
            ;;
        *)
            print_error "Unknown command: $command"
            echo ""
            show_usage
            exit 1
            ;;
    esac
}

# Run main
main "$@"
